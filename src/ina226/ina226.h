// #ifndef __INA226_H
// #define __INA226_H

// #include <stdint.h>
// #include <math.h>
// #include <CH58x_common.h>

// #ifdef __cplusplus 
// extern "C" { 
// #endif

// #define pin_scl GPIO_Pin_13
// #define pin_sda GPIO_Pin_12


// #define IIC_SCL_H   R32_PB_OUT |= pin_scl
// #define IIC_SCL_L   R32_PB_CLR |= pin_scl
// #define IIC_SDA_H   R32_PB_OUT |= pin_sda
// #define IIC_SDA_L   R32_PB_CLR |= pin_sda
// #define SDA_READ   (R32_PB_PIN & (pin_sda))
// #define SDA_IN  GPIOB_ModeCfg(pin_sda, GPIO_ModeIN_PU)
// #define SDA_OUT  GPIOB_ModeCfg(pin_sda, GPIO_ModeOut_PP_5mA)

// #define READ_ADDR                  0x81	 //A0=GND，A1=GND // R=1, W=0
// #define WRITE_ADDR                 0x80

// #define INA226_ADDR1 0x80
// #define Config_Reg                 0x00
// #define Shunt_V_Reg                0x01
// #define Bus_V_Reg                  0x02
// #define Power_Reg                  0x03
// #define Current_Reg                0x04
// #define Calib_Reg                  0x05
// #define Mask_En_Reg                0x06
// #define Alert_Reg                  0x07
// #define Man_ID_Reg                 0xFE  //0x5449
// #define ID_Reg                     0xFF  //0x2260

// #define 	CFG_REG	 		0x00		//
// #define 	SV_REG 			0x01		//分流电压
// #define 	BV_REG 			0x02		//总线电压
// #define 	PWR_REG 		0x03		//电源功率
// #define 	CUR_REG 		0x04		//电流
// #define 	CAL_REG 		0x05		//校准，设定满量程范围以及电流和功率测数的 
// #define 	ONFF_REG 		0x06		//屏蔽 使能 警报配置和转换准备就绪
// #define 	AL_REG 			0x07		//包含与所选警报功能相比较的限定值
// #define 	INA226_GET_ADDR 0XFF		
// //初始化INA226

// // void INA226_Init(float aShuntResistor_Ohms, float aMaxCurrent_Amps);
// //设置寄存器指针
// void INA226_SetRegPointer(uint8_t reg);
// //发送,写入数据
// void INA226_SendData(uint8_t reg,uint16_t data);

// //读取数据
// uint16_t INA226_ReadData();
// //1mA/bit

// uint16_t INA226_GET_CAL_REG();

// int32_t INA226_GetBusVoltage_uV();
// int32_t INA226_GetShuntVoltage_uV();
// int32_t INA226_GetCurrent_uA();
// int32_t INA226_GetPower_uW();

// #ifdef __cplusplus 
// }
// #endif
// #endif


/*
   Library to facilitate use of the INA226 Voltage, Current & Power monitor
   from Texas Instruments.
   See spec. here: http://www.ti.com/lit/ds/symlink/ina226.pdf.

   Copyright [2018] [AutoFox] autofoxsys@gmail.com

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This library is for STM32 using HAL provided by CubeMX

   In developing this library, besides reading the INA226 spec, I consulted
   the following code:

   * Linux drivers for the INA family (written in C)
   * https://github.com/SV-Zanshin/INA226 (most useful)

   PLATFORM DEPENDENCE
   Embodied in 3 functions related to I2C reading/writing

*/


#ifndef __INA226_H__
#define __INA226_H__

#include <inttypes.h>
#include <stdbool.h>
#include <CH58x_common.h>

#ifdef __cplusplus 
extern "C"{
#endif


#define pin_scl GPIO_Pin_13
#define pin_sda GPIO_Pin_12


#define IIC_SCL_H   R32_PB_OUT |= pin_scl
#define IIC_SCL_L   R32_PB_CLR |= pin_scl
#define IIC_SDA_H   R32_PB_OUT |= pin_sda
#define IIC_SDA_L   R32_PB_CLR |= pin_sda
#define SDA_READ   (R32_PB_PIN & (pin_sda))
#define SDA_IN  GPIOB_ModeCfg(pin_sda, GPIO_ModeIN_PU)
#define SDA_OUT  GPIOB_ModeCfg(pin_sda, GPIO_ModeOut_PP_5mA)

//If building a project generated by CubeMX then the I2C handle will
//be defined for you as hi2c1, hi2c2 etc depending on what pins you're using.
//We need to be able to reference this handle here so we define I2C_HANDLE to
//reference it.  You may need to change it depending on what pins you're using.

// extern I2C_HandleTypeDef hi2c1;
// #define I2C_HANDLE_IN226 hi2c1

//Heads up for the classes declared in this header
struct INA226; //This is the one you will use directly
struct INA226_Registers;
struct INA226_HardCodedChipConst;
struct INA226_DefaultSettings;

static const int INA226_I2C_TIMEOUT = 1000;

//Most functions will return an error status
typedef enum {OK=0, FAIL=-1,
    INA226_TI_ID_MISMATCH = -2,
    INA226_DIE_ID_MISMATCH =-3,
    CONFIG_ERROR = -4,
    I2C_TRANSMISSION_ERROR = -5,
    BAD_PARAMETER = -6,
    NOT_INITIALIZED = -7,
    INVALID_I2C_ADDRESS} status;

typedef struct INA226{
    bool     mInitialized;
    uint8_t  mI2C_Address;
    uint16_t mConfigRegister;        //local copy from the INA226
    uint16_t mCalibrationValue;        //local copy from the INA226
    int32_t  mCurrentMicroAmpsPerBit; //This is the Current_LSB, as defined in the INA266 spec
    int32_t  mPowerMicroWattPerBit;
} INA226;

//=============================================================================

enum eOperatingMode {//Shutdown=0,
                    ShuntVoltageTriggered        = 1,
                    BusVoltageTriggered          = 2,
                    ShuntAndBusTriggered         = 3,
                    Shutdown                     = 4,
                    ShuntVoltageContinuous       = 5,
                    BusVoltageContinuous         = 6,
                    ShuntAndBusVoltageContinuous = 7}; //default

enum eAlertTrigger {ClearTriggers                = 0x0000, //default
                    ShuntVoltageOverLimit        = 0x8000,
                    ShuntVoltageUnderLimit       = 0x4000,
                    BusVoltageOverLimit          = 0x2000,
                    BusVoltageUnderLimit         = 0x1000,
                    PowerOverLimit               = 0x0800,
                    ConversionReady              = 0x0400};

enum eAlertTriggerCause{
                    Unknown=0,
                    AlertFunctionFlag            = 0x10,
                    ConversionReadyFlag          = 0x08,
                    MathOverflowFlag             = 0x04,
                    AlertPolarityBit             = 0x02};
//=============================================================================


void INA226_Constructor(INA226*);
status INA226_CheckI2cAddress(uint8_t aI2C_Address);

//Resets the INA226 and configures it according to the supplied parameters - should be called first.
//status INA226_Init(uint8_t aI2C_Address=0x40, double aShuntResistor_Ohms=0.1, double aMaxCurrent_Amps=3.2767);
status INA226_Init(INA226* ,uint8_t aI2C_Address, double aShuntResistor_Ohms, double aMaxCurrent_Amps);
int32_t INA226_GetShuntVoltage_uV(INA226*);
int32_t INA226_GetBusVoltage_uV(INA226*);
int32_t INA226_GetCurrent_uA(INA226*);
int32_t INA226_GetPower_uW(INA226*);

status INA226_SetOperatingMode(INA226*,enum eOperatingMode aOpMode);
status INA226_Hibernate(INA226*); //Enters a very low power mode, no voltage measurements
status INA226_Wakeup(INA226*);    //Wake-up and enter the last operating mode

//The trigger value is in microwatts or microvolts, depending on the trigger
status INA226_ConfigureAlertPinTrigger(INA226*,enum eAlertTrigger aAlertTrigger, int32_t aValue, bool aLatching);
//status INA226_ResetAlertPin(INA226*);
status INA226_ResetAlertPin(INA226*,enum  eAlertTriggerCause* aAlertTriggerCause_p ); //provides feedback as to what caused the alert

//The parameters for the two functions below are indices into the tables defined in the INA226 spec
//These tables are copied below for your information (caNumSamplesAveraged & caVoltageConvTimeMicroSecs)
status INA226_ConfigureVoltageConversionTime(INA226*,int aIndexToConversionTimeTable);
status INA226_ConfigureNumSampleAveraging(INA226*,int aIndexToSampleAverageTable);
status INA226_Debug_GetConfigRegister(INA226*,uint16_t* aConfigReg_p);

//Private functions

status INA226_WriteRegister(INA226*,uint8_t aRegister, uint16_t aValue);
status INA226_ReadRegister(INA226*,uint8_t aRegister, uint16_t* aValue_p);
status INA226_setupCalibration(INA226*,double aShuntResistor_Ohms, double aMaxCurrent_Amps);

#ifdef __cplusplus 
}
#endif


#endif //__INA226_H__
